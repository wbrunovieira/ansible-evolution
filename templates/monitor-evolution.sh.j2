#!/bin/bash
# Evolution API Monitoring Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

# Configuration
EVOLUTION_URL="http://localhost:{{ evolution_port }}/healthcheck"
LOG_FILE="{{ evolution_install_path }}/logs/monitor.log"
ERROR_COUNT_FILE="{{ evolution_install_path }}/logs/error_count"
MAX_ERRORS=3
NOTIFICATION_SENT_FILE="{{ evolution_install_path }}/logs/notification_sent"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Initialize error count
if [ ! -f "$ERROR_COUNT_FILE" ]; then
    echo "0" > "$ERROR_COUNT_FILE"
fi

CURRENT_ERRORS=$(cat "$ERROR_COUNT_FILE")

# Check Evolution API health
log "Checking Evolution API health..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$EVOLUTION_URL")

if [ "$HTTP_STATUS" = "200" ]; then
    log "âœ“ Evolution API is healthy (HTTP $HTTP_STATUS)"

    # Reset error count
    echo "0" > "$ERROR_COUNT_FILE"

    # Remove notification sent flag
    rm -f "$NOTIFICATION_SENT_FILE"

    # Check container status
    CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' evolution_api 2>/dev/null)
    log "Container status: $CONTAINER_STATUS"

    # Check memory usage
    MEMORY_USAGE=$(docker stats evolution_api --no-stream --format "table {{.MemUsage}}" | tail -n 1)
    log "Memory usage: $MEMORY_USAGE"

    # Check PostgreSQL connection
    PG_STATUS=$(docker exec evolution_postgres pg_isready -U {{ postgres_user }} -d {{ postgres_db }} 2>&1)
    if [[ $PG_STATUS == *"accepting connections"* ]]; then
        log "âœ“ PostgreSQL is healthy"
    else
        log "âš  PostgreSQL status: $PG_STATUS"
    fi

    # Check Redis connection
    REDIS_STATUS=$(docker exec evolution_redis redis-cli -a "${REDIS_PASSWORD}" ping 2>/dev/null)
    if [ "$REDIS_STATUS" = "PONG" ]; then
        log "âœ“ Redis is healthy"
    else
        log "âš  Redis status: $REDIS_STATUS"
    fi

else
    log "âœ— Evolution API is unhealthy (HTTP $HTTP_STATUS)"

    # Increment error count
    CURRENT_ERRORS=$((CURRENT_ERRORS + 1))
    echo "$CURRENT_ERRORS" > "$ERROR_COUNT_FILE"

    log "Error count: $CURRENT_ERRORS/$MAX_ERRORS"

    # Check if we should take action
    if [ "$CURRENT_ERRORS" -ge "$MAX_ERRORS" ]; then
        log "âš  Maximum error count reached. Attempting to restart Evolution API..."

        # Try to restart the service
        cd {{ evolution_install_path }}
        docker compose restart evolution_api

        if [ $? -eq 0 ]; then
            log "âœ“ Evolution API restart command executed"
        else
            log "âœ— Failed to restart Evolution API"
        fi

        # Send notification only once
        if [ ! -f "$NOTIFICATION_SENT_FILE" ]; then
            {% if notification_webhook is defined %}
            curl -X POST "{{ notification_webhook }}" \
                -H "Content-Type: application/json" \
                -d "{\"text\":\"ðŸš¨ Evolution API on {{ evolution_domain }} is down! Attempted automatic restart.\"}" \
                2>/dev/null || true
            {% endif %}

            touch "$NOTIFICATION_SENT_FILE"
            log "Notification sent"
        fi

        # Reset error count after restart attempt
        echo "0" > "$ERROR_COUNT_FILE"
    fi
fi

# Check disk space
DISK_USAGE=$(df -h {{ evolution_install_path }} | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    log "âš  WARNING: Disk usage is at ${DISK_USAGE}%"
    {% if notification_webhook is defined %}
    curl -X POST "{{ notification_webhook }}" \
        -H "Content-Type: application/json" \
        -d "{\"text\":\"âš  Evolution API server disk usage is at ${DISK_USAGE}%\"}" \
        2>/dev/null || true
    {% endif %}
fi

# Log rotation
if [ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null) -gt 10485760 ]; then
    mv "$LOG_FILE" "${LOG_FILE}.old"
    log "Log file rotated"
fi

exit 0