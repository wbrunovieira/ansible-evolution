server {
    listen 80;
    server_name {{ evolution_domain }};

    # Redirect HTTP to HTTPS
    {% if enable_ssl %}
    return 301 https://$server_name$request_uri;
    {% else %}

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # WebSocket headers
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    # Timeouts
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # Client body size
    client_max_body_size 100M;

    # Main location
    location / {
        proxy_pass http://127.0.0.1:{{ evolution_port }};
        proxy_buffering off;
    }

    # Health check endpoint
    location /healthcheck {
        proxy_pass http://127.0.0.1:{{ evolution_port }}/healthcheck;
        access_log off;
    }
    {% endif %}
}

{% if enable_ssl %}
server {
    listen 443 ssl http2;
    server_name {{ evolution_domain }};

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/{{ evolution_domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ evolution_domain }}/privkey.pem;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # WebSocket headers
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    # Timeouts
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # Client body size
    client_max_body_size 100M;

    # Logging
    access_log /var/log/nginx/evolution_access.log;
    error_log /var/log/nginx/evolution_error.log;

    # Main location
    location / {
        proxy_pass http://127.0.0.1:{{ evolution_port }};
        proxy_buffering off;
    }

    # API endpoints
    location ~ ^/(instance|message|group|chat|webhook|typebot|proxy) {
        proxy_pass http://127.0.0.1:{{ evolution_port }};
        proxy_buffering off;

        # CORS headers (if needed)
        {% if evolution_cors_enabled %}
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        {% endif %}
    }

    # WebSocket location
    location /socket.io/ {
        proxy_pass http://127.0.0.1:{{ evolution_port }}/socket.io/;
        proxy_buffering off;
    }

    # Health check endpoint
    location /healthcheck {
        proxy_pass http://127.0.0.1:{{ evolution_port }}/healthcheck;
        access_log off;
    }

    # Metrics endpoint (internal only)
    location /metrics {
        proxy_pass http://127.0.0.1:{{ evolution_port }}/metrics;
        allow 127.0.0.1;
        deny all;
    }
}
{% endif %}