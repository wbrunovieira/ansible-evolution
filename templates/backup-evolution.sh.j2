#!/bin/bash
# Evolution API Backup Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -e

# Configuration
BACKUP_DIR="{{ evolution_install_path }}/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS={{ backup_retention_days }}
LOG_FILE="{{ evolution_install_path }}/logs/backup.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Start backup
log "=== Starting Evolution API backup ==="

# Create backup directory if not exists
mkdir -p "$BACKUP_DIR"

# Backup PostgreSQL database
log "Backing up PostgreSQL database..."
docker exec evolution_postgres pg_dump -U {{ postgres_user }} {{ postgres_db }} | gzip > "$BACKUP_DIR/evolution_db_${TIMESTAMP}.sql.gz"

if [ $? -eq 0 ]; then
    log "✓ Database backup completed successfully"
else
    log "✗ Database backup failed!"
    exit 1
fi

# Backup Evolution data volumes
log "Backing up Evolution data..."
tar -czf "$BACKUP_DIR/evolution_data_${TIMESTAMP}.tar.gz" \
    -C "{{ evolution_install_path }}/volumes" evolution_data/

if [ $? -eq 0 ]; then
    log "✓ Evolution data backup completed successfully"
else
    log "✗ Evolution data backup failed!"
    exit 1
fi

# Backup configuration files
log "Backing up configuration files..."
tar -czf "$BACKUP_DIR/evolution_config_${TIMESTAMP}.tar.gz" \
    -C "{{ evolution_install_path }}" \
    docker-compose.yml .env config/

if [ $? -eq 0 ]; then
    log "✓ Configuration backup completed successfully"
else
    log "✗ Configuration backup failed!"
    exit 1
fi

# Backup Redis data (optional)
log "Backing up Redis data..."
docker exec evolution_redis redis-cli -a "${REDIS_PASSWORD}" --rdb /data/backup.rdb BGSAVE
sleep 5  # Wait for backup to complete

tar -czf "$BACKUP_DIR/redis_data_${TIMESTAMP}.tar.gz" \
    -C "{{ evolution_install_path }}/volumes" redis_data/

if [ $? -eq 0 ]; then
    log "✓ Redis backup completed successfully"
else
    log "⚠ Redis backup failed (non-critical)"
fi

# Clean old backups
log "Cleaning old backups older than ${RETENTION_DAYS} days..."
find "$BACKUP_DIR" -type f -name "*.gz" -mtime +${RETENTION_DAYS} -delete

# Calculate backup size
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
log "Current backup directory size: $BACKUP_SIZE"

# List recent backups
log "Recent backups:"
ls -lh "$BACKUP_DIR" | tail -n 5 | tee -a "$LOG_FILE"

log "=== Evolution API backup completed successfully ==="

# Send notification (optional)
{% if notification_webhook is defined %}
curl -X POST "{{ notification_webhook }}" \
    -H "Content-Type: application/json" \
    -d "{\"text\":\"✅ Evolution API backup completed successfully on {{ evolution_domain }}\"}" \
    2>/dev/null || true
{% endif %}

exit 0